var nullstone;!function(t){t.version="0.3.10"}(nullstone||(nullstone={}));var nullstone;!function(t){var e=function(){function e(){}return e.prototype.loadAsync=function(e,n){var r=e+"/"+n;return t.async.create(function(e,n){require([r],function(t){e(t)},function(e){return n(new t.DirLoadError(r,e))})})},e.prototype.resolveType=function(t,e,n){return n.isPrimitive=!1,n.type=require(t+"/"+e),void 0!==n.type},e}();t.DirResolver=e}(nullstone||(nullstone={}));var nullstone;!function(t){var e=function(){function t(t){this.Object=t}return t.fromAny=function(t,e,n){if("number"==typeof e)return e;if(!e)return n||0;var r=t[e.toString()];return null==r?n||0:r},t}();t.Enum=e}(nullstone||(nullstone={}));var nullstone;!function(t){var e=function(){function t(){this.$$callbacks=[],this.$$scopes=[]}return Object.defineProperty(t.prototype,"has",{get:function(){return this.$$callbacks.length>0},enumerable:!0,configurable:!0}),t.prototype.on=function(t,e){this.$$callbacks.push(t),this.$$scopes.push(e)},t.prototype.off=function(t,e){for(var n=this.$$callbacks,r=this.$$scopes,i=n.length-1;i>-1;)i=n.lastIndexOf(t,i),r[i]===e&&(n.splice(i,1),r.splice(i,1)),i--},t.prototype.raise=function(t,e){for(var n=0,r=this.$$callbacks.slice(0),i=this.$$scopes.slice(0),o=r.length;o>n;n++)r[n].call(i[n],t,e)},t.prototype.raiseAsync=function(t,e){var n=this;window.setTimeout(function(){return n.raise(t,e)},1)},t}();t.Event=e}(nullstone||(nullstone={}));var nullstone;!function(t){var e=function(){function e(t){Object.defineProperty(this,"name",{value:t,writable:!1})}return e.prototype.is=function(e){if(!e)return!1;for(var n=e.constructor;n;){var r=n.$$interfaces;if(r&&r.indexOf(this)>-1)return!0;n=t.getTypeParent(n)}return!1},e.prototype.as=function(t){return this.is(t)?t:void 0},e.prototype.mark=function(e){return t.addTypeInterfaces(e,this),this},e}();t.Interface=e}(nullstone||(nullstone={}));var nullstone;!function(t){t.ICollection_=new t.Interface("ICollection")}(nullstone||(nullstone={}));var nullstone;!function(t){t.IEnumerable_=new t.Interface("IEnumerable"),t.IEnumerable_.is=function(t){return t&&t.getEnumerator&&"function"==typeof t.getEnumerator},t.IEnumerable_.empty={getEnumerator:function(e){return t.IEnumerator_.empty}},t.IEnumerable_.fromArray=function(e){return{$$arr:e,getEnumerator:function(e){return t.IEnumerator_.fromArray(this.$$arr,e)}}},t.IEnumerable_.toArray=function(t){for(var e=[],n=t.getEnumerator();n.moveNext();)e.push(n.current);return e}}(nullstone||(nullstone={}));var nullstone;!function(t){t.IEnumerator_=new t.Interface("IEnumerator"),t.IEnumerator_.empty={current:void 0,moveNext:function(){return!1}},t.IEnumerator_.fromArray=function(t,e){var n,r=t.length,i={moveNext:void 0,current:void 0};return e?(n=r,i.moveNext=function(){return n--,0>n?(i.current=void 0,!1):(i.current=t[n],!0)}):(n=-1,i.moveNext=function(){return n++,n>=r?(i.current=void 0,!1):(i.current=t[n],!0)}),i}}(nullstone||(nullstone={}));var nullstone;!function(t){var e=function(){function e(){}return Object.defineProperty(e.prototype,"propertyType",{get:function(){return void 0},enumerable:!0,configurable:!0}),e.prototype.getValue=function(t,e){return this.GetFunc?this.GetFunc.call(t,e):void 0},e.prototype.setValue=function(t,e,n){this.SetFunc&&this.SetFunc.call(t,e,n)},e.find=function(n){var r=n,i=n instanceof Function;if(i&&(r=new n),r instanceof Array){var o=new e;return o.GetFunc=function(t){return this[t]},o.SetFunc=function(t,e){this[t]=e},o}var s=t.ICollection_.as(r);if(s){var o=new e;return o.GetFunc=function(t){return this.GetValueAt(t)},o.SetFunc=function(t,e){return this.SetValueAt(t,e)},o}},e}();t.IndexedPropertyInfo=e}(nullstone||(nullstone={}));var nullstone;!function(t){function e(t,e){t.$$uri||Object.defineProperty(t,"$$uri",{value:e.toString(),enumerable:!1})}var n=function(){function n(e){this.$$module=null,this.$$sourcePath=null,this.$$primtypes={},this.$$types={},this.$$loaded=!1,Object.defineProperty(this,"name",{value:e,writable:!1});var n=e;0!==e.indexOf("http://")&&(n="lib://"+e),Object.defineProperty(this,"uri",{value:new t.Uri(n),writable:!1})}return Object.defineProperty(n.prototype,"sourcePath",{get:function(){var t=this.$$sourcePath||"lib/"+this.name+"/dist/"+this.name;return this.useMin?t+".min":t},set:function(t){".js"===t.substr(t.length-3)&&(t=t.substr(0,t.length-3)),this.useMin&&".min"===t.substr(t.length-4)&&(t=t.substr(0,t.length-4)),this.$$sourcePath=t},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"rootModule",{get:function(){return this.$$module=this.$$module||require(this.sourcePath)},enumerable:!0,configurable:!0}),n.prototype.loadAsync=function(){var e=this;return this.$$sourcePath||"http"!==this.uri.scheme||(this.$$loaded=!0),this.$$loaded?t.async.resolve(this):(this.$configModule(),t.async.create(function(n,r){require([e.name],function(t){e.$$module=t,e.$$loaded=!0,n(e)},function(n){return r(new t.LibraryLoadError(e,n))})}))},n.prototype.$configModule=function(){var t={paths:{},shim:{},map:{"*":{}}},e=this.sourcePath;t.paths[this.name]=e,t.shim[this.name]={exports:this.exports,deps:this.deps},t.map["*"][e]=this.name,require.config(t)},n.prototype.resolveType=function(t,n,r){if(!t)return r.isPrimitive=!0,void 0!==(r.type=this.$$primtypes[n])?!0:(r.isPrimitive=!1,void 0!==(r.type=this.$$types[n]));var i=this.rootModule;if(r.isPrimitive=!1,r.type=void 0,"/"!==t)for(var o=0,s=t.substr(1).split(".");o<s.length&&i;o++)i=i[s[o]];if(!i)return!1;r.type=i[n];var u=r.type;return void 0===u?!1:(e(u,this.uri),!0)},n.prototype.add=function(n,r){if(!n)throw new Error("A type must be specified when registering '"+r+"'`.");if(r=r||t.getTypeName(n),!r)throw new Error("No type name found.");return e(n,this.uri),this.$$types[r]=n,this},n.prototype.addPrimitive=function(n,r){if(!n)throw new Error("A type must be specified when registering '"+r+"'`.");if(r=r||t.getTypeName(n),!r)throw new Error("No type name found.");return e(n,this.uri),this.$$primtypes[r]=n,this},n.prototype.addEnum=function(t,e){return this.addPrimitive(t,e),Object.defineProperty(t,"$$enum",{value:!0,writable:!1}),t.name=e,this},n}();t.Library=n}(nullstone||(nullstone={}));var nullstone;!function(t){var e=function(){function e(){this.$$libs={},this.libraryCreated=new t.Event,this.dirResolver=new t.DirResolver}return e.prototype.createLibrary=function(e){return new t.Library(e)},e.prototype.loadTypeAsync=function(e,n){var r=this.resolve(e);return r?t.async.create(function(t,e){r.loadAsync().then(function(e){var r={isPrimitive:!1,type:void 0};t(e.resolveType(null,n,r)?r.type:null)},e)}):this.dirResolver.loadAsync(e,n)},e.prototype.resolve=function(e){var n=new t.Uri(e),r=n.scheme;if(!r)return null;var i="lib"===r?n.host:e,o=this.$$libs[i];return o||(o=this.$$libs[i]=this.createLibrary(i),this.$$onLibraryCreated(o)),o},e.prototype.resolveType=function(e,n,r){var i=new t.Uri(e),o=i.scheme;if(!o)return this.dirResolver.resolveType(e,n,r);var s="lib"===o?i.host:e,u="lib"===o?i.absolutePath:"",a=this.$$libs[s];return a||(a=this.$$libs[s]=this.createLibrary(s),this.$$onLibraryCreated(a)),a.resolveType(u,n,r)},e.prototype.$$onLibraryCreated=function(t){this.libraryCreated.raise(this,Object.freeze({library:t}))},e}();t.LibraryResolver=e}(nullstone||(nullstone={}));var nullstone;!function(t){var e=function(){function t(t){this.$$cache={},this.$$creator=t}return t.prototype.memoize=function(t){var e=this.$$cache[t];return e||(this.$$cache[t]=e=this.$$creator(t)),e},t}();t.Memoizer=e}(nullstone||(nullstone={}));var nullstone;!function(t){function e(t,e){if(!t)return void 0;var n=t.constructor,r=Object.getOwnPropertyDescriptor(n.prototype,e);return r?r:Object.getOwnPropertyDescriptor(t,e)}function n(t,e){if(!t)return!1;if(t.hasOwnProperty(e))return!0;var n=t.constructor;return n.prototype.hasOwnProperty(e)}t.getPropertyDescriptor=e,t.hasProperty=n}(nullstone||(nullstone={}));var nullstone;!function(t){var e=function(){function e(){}return e.prototype.getValue=function(t){return this.$$getFunc?this.$$getFunc.call(t):void 0},e.prototype.setValue=function(t,e){return this.$$setFunc?this.$$setFunc.call(t,e):void 0},e.find=function(n,r){var i=n,o=n instanceof Function;if(o&&(i=new n),!(i instanceof Object))return null;var s=r,u=t.getPropertyDescriptor(i,r);if(u){var a=new e;return a.name=r,a.$$getFunc=u.get,a.$$getFunc||(a.$$getFunc=function(){return this[s]}),a.$$setFunc=u.set,!a.$$setFunc&&u.writable&&(a.$$setFunc=function(t){this[s]=t}),a}var l=o?n:n.constructor,a=new e;return a.name=r,a.$$getFunc=l.prototype["Get"+r],a.$$setFunc=l.prototype["Set"+r],a},e}();t.PropertyInfo=e}(nullstone||(nullstone={}));var nullstone;!function(t){function e(t){var e=t;if(!e)return"";var n=e.name;if(n)return n;var n=e.toString().match(/function ([^\(]+)/)[1];return Object.defineProperty(e,"name",{enumerable:!1,value:n,writable:!1}),n}function n(t){if(t===Object)return null;var e=t.$$parent;if(!e){if(!t.prototype)return void 0;e=Object.getPrototypeOf(t.prototype).constructor,Object.defineProperty(t,"$$parent",{value:e,writable:!1})}return e}function r(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(e){for(var r=0,i=e.length;i>r;r++)if(!e[r]){console.warn("Registering undefined interface on type.",t);break}Object.defineProperty(t,"$$interfaces",{value:e,writable:!1})}}function i(t,e){for(var r=t;r&&r!==e;)r=n(r);return null!=r}t.getTypeName=e,t.getTypeParent=n,t.addTypeInterfaces=r,t.doesInheritFrom=i}(nullstone||(nullstone={}));var nullstone;!function(t){function e(e,n){var r=o[n];if(r)return r(e);if(n instanceof t.Enum){var i=n.Object;return i.Converter?i.Converter(e):(e=e||0,"string"==typeof e?i[e]:e)}return e}function n(t,e){return t?e[t]:0}function r(t,e){o[t]=e}function i(t,e){t.Converter=e}var o=[];o[Boolean]=function(t){if(null==t)return null;if("boolean"==typeof t)return t;var e=t.toString().toUpperCase();return"TRUE"===e?!0:"FALSE"===e?!1:null},o[String]=function(t){return null==t?"":t.toString()},o[Number]=function(t){return t?"number"==typeof t?t:parseFloat(t.toString()):0},o[Date]=function(t){return new Date(null==t?0:t.toString())},o[RegExp]=function(t){if(t instanceof RegExp)return t;if(t=null)throw new Error("Cannot specify an empty RegExp.");return t=t.toString(),new RegExp(t)},t.convertAnyToType=e,t.convertStringToEnum=n,t.registerTypeConverter=r,t.registerEnumConverter=i}(nullstone||(nullstone={}));var nullstone;!function(t){!function(t){t[t.RelativeOrAbsolute=0]="RelativeOrAbsolute",t[t.Absolute=1]="Absolute",t[t.Relative=2]="Relative"}(t.UriKind||(t.UriKind={}));var e=(t.UriKind,function(){function t(e,n){"string"==typeof e?(this.$$originalString=e,this.$$kind=n||0):e instanceof t&&(this.$$originalString=e.$$originalString,this.$$kind=e.$$kind)}return Object.defineProperty(t.prototype,"kind",{get:function(){return this.$$kind},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"host",{get:function(){var t=this.$$originalString,e=Math.max(3,t.indexOf("://")+3),n=t.indexOf("/",e);return 0>n?t.substr(e):t.substr(e,n-e)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"absolutePath",{get:function(){var t=this.$$originalString,e=Math.max(3,t.indexOf("://")+3),n=t.indexOf("/",e);if(0>n||e>n)return"/";var r=t.indexOf("?",n);return 0>r||n>r?t.substr(n):t.substr(n,r-n)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"scheme",{get:function(){var t=this.$$originalString,e=t.indexOf("://");return 0>e?null:t.substr(0,e)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"fragment",{get:function(){var t=this.$$originalString,e=t.indexOf("#");return 0>e?"":t.substr(e)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"originalString",{get:function(){return this.$$originalString.toString()},enumerable:!0,configurable:!0}),t.prototype.toString=function(){return this.$$originalString.toString()},t.prototype.equals=function(t){return this.$$originalString===t.$$originalString},t.isNullOrEmpty=function(t){return null==t?!0:!t.$$originalString},t}());t.Uri=e,t.registerTypeConverter(e,function(t){return null==t&&(t=""),new e(t.toString())})}(nullstone||(nullstone={}));var nullstone;!function(t){var e=function(){function e(e,n){this.defaultUri=e,this.xUri=n,this.libResolver=new t.LibraryResolver,this.libResolver.resolve(e).add(Array,"Array"),this.libResolver.resolve(n).addPrimitive(String,"String").addPrimitive(Number,"Number").addPrimitive(Number,"Double").addPrimitive(Date,"Date").addPrimitive(RegExp,"RegExp").addPrimitive(Boolean,"Boolean").addPrimitive(t.Uri,"Uri")}return e.prototype.resolveLibrary=function(t){return this.libResolver.resolve(t||this.defaultUri)},e.prototype.loadTypeAsync=function(t,e){return this.libResolver.loadTypeAsync(t||this.defaultUri,e)},e.prototype.resolveType=function(t,e,n){return n.isPrimitive=!1,n.type=void 0,this.libResolver.resolveType(t||this.defaultUri,e,n)},e.prototype.add=function(t,e,n){var r=this.libResolver.resolve(t||this.defaultUri);return r&&r.add(n,e),this},e.prototype.addPrimitive=function(t,e,n){var r=this.libResolver.resolve(t||this.defaultUri);return r&&r.addPrimitive(n,e),this},e.prototype.addEnum=function(t,e,n){var r=this.libResolver.resolve(t||this.defaultUri);return r&&r.addEnum(n,e),this},e}();t.TypeManager=e}(nullstone||(nullstone={}));var nullstone;!function(t){function e(e,n,r,i){var o=e,s=o.$$annotations;s||Object.defineProperty(o,"$$annotations",{value:s=[],writable:!1});var u=s[n];if(u||(s[n]=u=[]),i&&u.length>0)throw new Error("Only 1 '"+n+"' annotation allowed per type ["+t.getTypeName(e)+"].");u.push(r)}function n(t,e){var n=t,r=n.$$annotations;return r?(r[e]||[]).slice(0):void 0}function r(t){function r(n){for(var r=[],i=1;i<arguments.length;i++)r[i-1]=arguments[i];for(var o=0,s=r.length;s>o;o++)e(n,t,r[o])}return r.Get=function(e){return n(e,t)},r}t.Annotation=e,t.GetAnnotations=n,t.CreateTypedAnnotation=r}(nullstone||(nullstone={}));var nullstone;!function(t){var e;!function(e){function n(t){function e(t){o=t,r&&r(t)}function n(t){s=t,i&&i(t)}var r,i,o,s;t(e,n);var u={then:function(t,e){return r=t,i=e,void 0!==o?r&&r(o):void 0!==s&&i&&i(s),u}};return u}function r(t){return e.create(function(e,n){e(t)})}function i(t){return e.create(function(e,n){n(t)})}function o(e){return!e||e.length<1?r([]):n(function(n,r){function i(e,i,c){o[e]=i,s[e]=c,l=l||void 0!==c,u++,u>=a&&(l?r(new t.AggregateError(s)):n(o))}for(var o=new Array(e.length),s=new Array(e.length),u=0,a=e.length,l=!1,c=0;a>c;c++)e[c].then(function(t){return i(c,t,void 0)},function(t){return i(c,void 0,t)})})}e.create=n,e.resolve=r,e.reject=i,e.many=o}(e=t.async||(t.async={}))}(nullstone||(nullstone={}));var nullstone;!function(t){function e(t,e){return null==t&&null==e?!0:null==t||null==e?!1:t===e?!0:!!t.equals&&t.equals(e)}t.equals=e}(nullstone||(nullstone={}));var nullstone;!function(t){var e=function(){function t(t){this.errors=t.filter(function(t){return!!t}),Object.freeze(this)}return Object.defineProperty(t.prototype,"flat",{get:function(){for(var e=[],n=0,r=this.errors;n<r.length;n++){var i=r[n];i instanceof t?e=e.concat(i.flat):e.push(i)}return e},enumerable:!0,configurable:!0}),t}();t.AggregateError=e}(nullstone||(nullstone={}));var nullstone;!function(t){var e=function(){function t(t,e){this.path=t,this.error=e,Object.freeze(this)}return t}();t.DirLoadError=e}(nullstone||(nullstone={}));var nullstone;!function(t){var e=function(){function t(t,e){this.library=t,this.error=e,Object.freeze(this)}return t}();t.LibraryLoadError=e}(nullstone||(nullstone={}));var nullstone;!function(t){var e;!function(t){function e(t,e,r,i){return t?("function"==typeof t.resolveTypeFields&&t.resolveTypeFields(function(t){return n(t,e,r)}),"function"==typeof t.transmute?t.transmute(i):t):t}function n(t,e,n){var r=null,i=t,o=i.indexOf(":");o>-1&&(r=i.substr(0,o),i=i.substr(o+1));var s=e.lookupNamespaceURI(r),u=n(s,i);return u.type}t.finishMarkupExtension=e}(e=t.markup||(t.markup={}))}(nullstone||(nullstone={}));var nullstone;!function(t){var e;!function(e){function n(t){return{resolveType:t.resolveType||function(t,e){return r},resolveObject:t.resolveObject||function(t){return new t},resolvePrimitive:t.resolvePrimitive||function(t,e){return new t(e)},resolveResources:t.resolveResources||function(t,e){return new Object},branchSkip:t.branchSkip||function(t,e){},object:t.object||function(t,e){},objectEnd:t.objectEnd||function(t,e,n){},contentText:t.contentText||function(t){},name:t.name||function(t){},propertyStart:t.propertyStart||function(t,e){},propertyEnd:t.propertyEnd||function(t,e){},attributeStart:t.attributeStart||function(t,e){},attributeEnd:t.attributeEnd||function(t,e,n){},error:t.error||function(t){return!0},end:t.end||function(){}}}e.NO_PARSER={on:function(t){return e.NO_PARSER},setNamespaces:function(t,n){return e.NO_PARSER},setExtensionParser:function(t){return e.NO_PARSER},parse:function(t){},skipBranch:function(){},resolvePrefix:function(t){return""},walkUpObjects:function(){return t.IEnumerator_.empty}};var r={isPrimitive:!1,type:Object};e.createMarkupSax=n}(e=t.markup||(t.markup={}))}(nullstone||(nullstone={}));var nullstone;!function(t){var e;!function(e){var n=function(){function n(e){this.uri=new t.Uri(e)}return n.prototype.createParser=function(){return e.NO_PARSER},n.prototype.resolve=function(t,n){var r=new e.MarkupDependencyResolver(t,this.createParser());return r.collect(this.root,n),r.resolve()},n.prototype.loadAsync=function(){var e="text!"+this.uri.toString(),n=this;return t.async.create(function(t,r){require([e],function(e){n.setRoot(n.loadRoot(e)),t(n)},r)})},n.prototype.loadRoot=function(t){return t},n.prototype.setRoot=function(t){return this.root=t,this},n}();e.Markup=n}(e=t.markup||(t.markup={}))}(nullstone||(nullstone={}));var nullstone;!function(t){var e;!function(e){var n=function(){function e(t,e){this.typeManager=t,this.parser=e,this.$$uris=[],this.$$names=[],this.$$resolving=[]}return e.prototype.collect=function(t,e){var n=this,r={},i={isPrimitive:!1,type:Object},o={uri:"",name:"",obj:void 0},s={resolveType:function(t,e){return n.add(t,e),o.uri=t,o.name=e,i},resolveObject:function(t){return r},objectEnd:function(t,e,n){o.obj=t},propertyEnd:function(t,e){},attributeEnd:function(t,e,n){}};e&&(s.propertyEnd=function(t,n){e(o.uri,o.name,n,o.obj)},s.attributeEnd=function(t,n,r){e(o.uri,o.name,n,r)}),this.parser.on(s).parse(t)},e.prototype.add=function(t,e){var n=this.$$uris,r=this.$$names,i=n.indexOf(t);return i>-1&&r[i]===e?!1:this.$$resolving.indexOf(t+"/"+e)>-1?!1:(n.push(t),r.push(e),!0)},e.prototype.resolve=function(){for(var e=[],n=0,r=this.$$uris,i=this.$$names,o=this.typeManager,s=this.$$resolving;n<r.length;n++){var u=r[n],a=i[n];s.push(u+"/"+a),e.push(o.loadTypeAsync(u,a))}return t.async.many(e)},e}();e.MarkupDependencyResolver=n}(e=t.markup||(t.markup={}))}(nullstone||(nullstone={}));var nullstone;!function(t){var e;!function(t){var e;!function(e){function n(t){if(!t)return!1;var e=t[0].toUpperCase().charCodeAt(0);return e>=65&&90>=e}var r=function(){function r(){this.$$defaultXmlns="http://schemas.wsick.com/fayde",this.$$xXmlns="http://schemas.wsick.com/fayde/x"}return r.prototype.setNamespaces=function(t,e){return this.$$defaultXmlns=t,this.$$xXmlns=e,this},r.prototype.parse=function(e,r,i){if(!n(e[1]))return e;this.$$ensure();var o={text:e,i:1,acc:"",error:"",resolver:r},s=this.$$doParse(o,i);return o.error&&this.$$onError(o.error),s=t.finishMarkupExtension(s,r,this.$$onResolveType,i)},r.prototype.$$doParse=function(t,e){if(!this.$$parseName(t))return void 0;for(this.$$startExtension(t,e);t.i<t.text.length&&this.$$parseKeyValue(t,e)&&"}"!==t.text[t.i];);return e.pop()},r.prototype.$$parseName=function(t){var e=t.text.indexOf(" ",t.i);return e>t.i?(t.acc=t.text.substr(t.i,e-t.i),t.i=e+1,!0):(e=t.text.indexOf("}",t.i),e>t.i?(t.acc=t.text.substr(t.i,e-t.i),t.i=e,!0):(t.error="Missing closing bracket.",!1))},r.prototype.$$startExtension=function(t,n){var r,i=t.acc,o=i.indexOf(":"),s=0>o?null:i.substr(0,o),u=0>o?i:i.substr(o+1),a=s?t.resolver.lookupNamespaceURI(s):e.DEFAULT_XMLNS;if(a===this.$$xXmlns)if("Null"===u)r=this.$$parseXNull(t);else if("Type"===u)r=this.$$parseXType(t);else{if("Static"!==u)throw new Error("Unknown markup extension. ["+s+":"+u+"]");r=this.$$parseXStatic(t)}else{var l=this.$$onResolveType(a,u);r=this.$$onResolveObject(l.type)}n.push(r)},r.prototype.$$parseXNull=function(t){var e=t.text.indexOf("}",t.i);if(e<t.i)throw new Error("Unterminated string constant.");return t.i=e,null},r.prototype.$$parseXType=function(t){var e=t.text.indexOf("}",t.i);if(e<t.i)throw new Error("Unterminated string constant.");var n=t.text.substr(t.i,e-t.i);t.i=e;var r=n.indexOf(":"),i=0>r?null:n.substr(0,r),o=0>r?n:n.substr(r+1),s=t.resolver.lookupNamespaceURI(i),u=this.$$onResolveType(s,o);return u.type},r.prototype.$$parseXStatic=function(t){for(var e=t.text,n=e.length,r=t.i;t.i<n&&("}"!==e[t.i]||"\\"===e[t.i-1]);t.i++);var i=e.substr(r,t.i-r),o=new Function("return ("+i+");");return o()},r.prototype.$$parseKeyValue=function(t,e){var r=t.text;t.acc="";for(var i="",o=void 0,s=r.length,u=!1;t.i<s;t.i++){var a=r[t.i];if("\\"===a)t.i++,t.acc+=r[t.i];else if("{"===a){if(u||!n(r[t.i+1])){t.acc+=a,u=!0;continue}if(!i)return t.error="A sub extension must be set to a key.",!1;if(t.i++,o=this.$$doParse(t,e),t.error)return!1}else if("="===a)i=t.acc.trim(),t.acc="";else{if("}"===a)return u&&(u=!1,t.acc+=a),this.$$finishKeyValue(t,i,o,e),!0;if(","===a)return t.i++,this.$$finishKeyValue(t,i,o,e),!0;i&&!t.acc&&"'"===a?(t.i++,this.$$parseSingleQuoted(t),o=t.acc,t.acc=""):t.acc+=a}}throw new Error("Unterminated string constant.")},r.prototype.$$finishKeyValue=function(e,n,r,i){if(void 0!==r||(r=e.acc.trim())){r=t.finishMarkupExtension(r,e.resolver,this.$$onResolveType,i);var o=i[i.length-1];n?o[n]=r:o.init&&o.init(r)}},r.prototype.$$parseSingleQuoted=function(t){for(var e=t.text,n=e.length;t.i<n;t.i++){var r=e[t.i];if("\\"===r)t.i++,t.acc+=e[t.i];else{if("'"===r)return;t.acc+=r}}},r.prototype.$$ensure=function(){this.onResolveType(this.$$onResolveType).onResolveObject(this.$$onResolveObject).onError(this.$$onError)},r.prototype.onResolveType=function(t){var e={isPrimitive:!1,type:Object};return this.$$onResolveType=t||function(t,n){return e},this},r.prototype.onResolveObject=function(t){return this.$$onResolveObject=t||function(t){return new t},this},r.prototype.onResolvePrimitive=function(t){return this.$$onResolvePrimitive=t||function(t,e){return new t(e)},this},r.prototype.onError=function(t){return this.$$onError=t||function(t){},this},r}();e.XamlExtensionParser=r}(e=t.xaml||(t.xaml={}))}(e=t.markup||(t.markup={}))}(nullstone||(nullstone={}));var __extends=this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);n.prototype=e.prototype,t.prototype=new n},nullstone;!function(t){var e;!function(e){var n;!function(n){var r=new DOMParser,i=new t.Memoizer(function(t){return new o(t)}),o=function(t){function e(){t.apply(this,arguments)}return __extends(e,t),e.create=function(t){return i.memoize(t.toString())},e.prototype.createParser=function(){return new n.XamlParser},e.prototype.loadRoot=function(t){var e=r.parseFromString(t,"text/xml");return e.documentElement},e}(e.Markup);n.XamlMarkup=o}(n=e.xaml||(e.xaml={}))}(e=t.markup||(t.markup={}))}(nullstone||(nullstone={}));var nullstone;!function(t){var e;!function(t){var e;!function(e){function n(t,e,n){for(var r=n+".Resources",i=t.firstElementChild;i;){if(i.localName===r&&i.namespaceURI===e)return i;i=i.nextElementSibling}return null}e.DEFAULT_XMLNS="http://schemas.wsick.com/fayde",e.DEFAULT_XMLNS_X="http://schemas.wsick.com/fayde/x";var r="http://www.w3.org/1999/xhtml",i="parsererror",o=function(){function o(){this.$$onEnd=null,this.$$objectStack=[],this.$$skipnext=!1,this.$$curel=null,this.$$curkey=void 0,this.setExtensionParser(new e.XamlExtensionParser).setNamespaces(e.DEFAULT_XMLNS,e.DEFAULT_XMLNS_X).on({})}return o.prototype.on=function(e){return e=t.createMarkupSax(e),this.$$onResolveType=e.resolveType,this.$$onResolveObject=e.resolveObject,this.$$onResolvePrimitive=e.resolvePrimitive,this.$$onResolveResources=e.resolveResources,this.$$onBranchSkip=e.branchSkip,this.$$onObject=e.object,this.$$onObjectEnd=e.objectEnd,this.$$onContentText=e.contentText,this.$$onName=e.name,this.$$onPropertyStart=e.propertyStart,this.$$onPropertyEnd=e.propertyEnd,this.$$onAttributeStart=e.attributeStart,this.$$onAttributeEnd=e.attributeEnd,this.$$onError=e.error,this.$$onEnd=e.end,this.$$extension&&this.$$extension.onResolveType(this.$$onResolveType).onResolveObject(this.$$onResolveObject).onResolvePrimitive(this.$$onResolvePrimitive),this},o.prototype.setNamespaces=function(t,e){return this.$$defaultXmlns=t,this.$$xXmlns=e,this.$$extension&&this.$$extension.setNamespaces(this.$$defaultXmlns,this.$$xXmlns),this},o.prototype.setExtensionParser=function(t){return this.$$extension=t,t&&t.setNamespaces(this.$$defaultXmlns,this.$$xXmlns).onResolveType(this.$$onResolveType).onResolveObject(this.$$onResolveObject).onResolvePrimitive(this.$$onResolvePrimitive).onError(function(t){throw t}),this},o.prototype.parse=function(t){if(!this.$$extension)throw new Error("No extension parser exists on parser.");return this.$$handleElement(t,!0),this.$$destroy(),this},o.prototype.skipBranch=function(){this.$$skipnext=!0},o.prototype.walkUpObjects=function(){var t=this.$$objectStack,e=t.length;return{current:void 0,moveNext:function(){return e--,void 0!==(this.current=t[e])}}},o.prototype.resolvePrefix=function(t){return this.$$curel.lookupNamespaceURI(t)},o.prototype.$$handleElement=function(t,e){var r=this.$$curel;this.$$curel=t;var i=t.localName,o=t.namespaceURI;if(this.$$tryHandleError(t,o,i)||this.$$tryHandlePropertyTag(t,o,i))return void(this.$$curel=r);var s=this.$$objectStack,u=this.$$onResolveType(o,i);if(this.$$tryHandlePrimitive(t,u,e))return void(this.$$curel=r);var a=this.$$onResolveObject(u.type);void 0!==a&&(s.push(a),this.$$onObject(a,e));var l=n(t,o,i);l&&this.$$handleResources(a,u.type,l),this.$$curkey=void 0,this.$$processAttributes(t);var c=this.$$curkey;if(this.$$skipnext)return this.$$skipnext=!1,s.pop(),this.$$onObjectEnd(a,c,e,s[s.length-1]),this.$$onBranchSkip(t.firstElementChild,a),void(this.$$curel=r);for(var f=t.firstElementChild,p=!!f;f;)l&&f===l||this.$$handleElement(f,!0),f=f.nextElementSibling;if(!p){var $=t.textContent;$&&($=$.trim())&&this.$$onContentText($)}void 0!==a&&(s.pop(),this.$$onObjectEnd(a,c,e,s[s.length-1])),this.$$curel=r},o.prototype.$$handleResources=function(t,e,n){var r=this.$$objectStack,i=this.$$onResolveResources(t,e);r.push(i),this.$$onObject(i,!1);for(var o=n.firstElementChild;o;)this.$$handleElement(o,!0),o=o.nextElementSibling;r.pop(),this.$$onObjectEnd(i,void 0,!1,r[r.length-1])},o.prototype.$$tryHandleError=function(t,e,n){return e!==r||n!==i?!1:(this.$$onError(new Error(t.textContent)),!0)},o.prototype.$$tryHandlePropertyTag=function(t,e,n){var r=n.indexOf(".");if(0>r)return!1;var i=this.$$onResolveType(e,n.substr(0,r)),o=i.type;n=n.substr(r+1),this.$$onPropertyStart(o,n);for(var s=t.firstElementChild;s;)this.$$handleElement(s,!1),s=s.nextElementSibling;return this.$$onPropertyEnd(o,n),!0},o.prototype.$$tryHandlePrimitive=function(t,e,n){if(!e.isPrimitive)return!1;var r=t.textContent,i=this.$$onResolvePrimitive(e.type,r?r.trim():"");this.$$onObject(i,n),this.$$curkey=void 0,this.$$processAttributes(t);var o=this.$$curkey,s=this.$$objectStack;return this.$$onObjectEnd(i,o,n,s[s.length-1]),!0},o.prototype.$$processAttributes=function(t){for(var e=0,n=t.attributes,r=n.length;r>e;e++)this.$$processAttribute(n[e])},o.prototype.$$processAttribute=function(t){var e=t.prefix,n=t.localName;if(this.$$shouldSkipAttr(e,n))return!0;var r=t.namespaceURI,i=t.value;return this.$$tryHandleXAttribute(r,n,i)?!0:this.$$handleAttribute(r,n,i,t)},o.prototype.$$shouldSkipAttr=function(t,e){return"xmlns"===t?!0:!t&&"xmlns"===e},o.prototype.$$tryHandleXAttribute=function(t,e,n){return t!==this.$$xXmlns?!1:("Name"===e&&this.$$onName(n),"Key"===e&&(this.$$curkey=n),!0)},o.prototype.$$handleAttribute=function(t,e,n,r){var i=null,e=e,o=e.indexOf(".");if(o>-1){var s=this.$$onResolveType(t,e.substr(0,o));i=s.type,e=e.substr(o+1)}this.$$onAttributeStart(i,e);var u=this.$$getAttrValue(n,r);return this.$$onAttributeEnd(i,e,u),!0},o.prototype.$$getAttrValue=function(t,e){return"{"!==t[0]?t:this.$$extension.parse(t,e,this.$$objectStack)},o.prototype.$$destroy=function(){this.$$onEnd&&this.$$onEnd()},o}();e.XamlParser=o}(e=t.xaml||(t.xaml={}))}(e=t.markup||(t.markup={}))}(nullstone||(nullstone={}));
//# sourceMappingURL=data:application/json;base64,